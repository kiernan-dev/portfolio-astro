---
import { Check, ClipboardCopy, ExternalLink, ArrowLeft, X } from "lucide-react";
import { Image } from "astro:assets";
import { CenterTitle, SectionTitle } from "./";
---

<div
    id="project-modal"
    style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: 9999; background: rgba(0,0,0,0.9); display: none;"
>
    <div
        style="width: 100%; height: 100vh; background-color: var(--base); color: var(--text); overflow-y: hidden; position: relative;"
    >
        <!-- Close button -->
        <button
            id="close-modal"
            style="position: absolute; top: 20px; right: 20px; z-index: 10000; padding: 10px; background: var(--LinkBtnGradient); border: none; border-radius: 50%; cursor: pointer;"
        >
            <X size={20} />
        </button>

        <!-- Modal content will be dynamically populated -->
        <div id="modal-content" style="padding: 20px; padding-top: 80px; padding-right: 15px; box-sizing: border-box; height: 100%; overflow-y: scroll;">
            <!-- Content will be inserted here by JavaScript -->
        </div>
    </div>
</div>

<style is:global>
    body.modal-open {
        overflow: hidden !important;
        position: fixed !important;
        width: 100% !important;
    }
    
    /* Modal content scrollbar styling */
    #modal-content {
        scrollbar-width: auto;
        scrollbar-color: var(--primaryLite) var(--base);
    }
    
    #modal-content::-webkit-scrollbar {
        width: 12px;
    }
    
    #modal-content::-webkit-scrollbar-track {
        background: var(--base);
        border-radius: 6px;
    }
    
    #modal-content::-webkit-scrollbar-thumb {
        background: var(--primaryLite);
        border-radius: 6px;
        border: 2px solid var(--base);
    }
    
    #modal-content::-webkit-scrollbar-thumb:hover {
        background: var(--primaryLite);
        opacity: 0.8;
    }

    /* Ensure utility classes work in modal */
    .bg-LinkBtnGradient {
        background: var(--LinkBtnGradient);
    }
    
    .bg-backgroundLite {
        background: var(--baseLite);
    }
    
    .bg-skillGradientAlt {
        background: var(--SkillGradientAlt);
    }
    
    .bg-imgOverlayGradient {
        background: var(--overlayGradient);
    }
    
    .text-secondary {
        color: hsl(var(--secondary));
    }
    
    .border-primaryLiteAlt {
        border-color: var(--primaryLiteAlt);
    }
    
    .border-secondaryLiteAlt {
        border-color: var(--secondaryLiteAlt);
    }
    
    .font-ubuntu {
        font-family: Ubuntu, sans-serif;
    }
</style>

<script is:inline>
    // Store projects globally for modal access
    window.projectsData = null;
    
    // Modal functionality
    const modal = document.getElementById('project-modal');
    const modalContent = document.getElementById('modal-content');
    const closeBtn = document.getElementById('close-modal');

    // Close modal function
    function closeModal() {
        modal.style.display = 'none';
        
        // Get the stored scroll position
        const scrollY = window.modalScrollY || 0;
        
        // Restore body scroll
        document.body.style.overflow = '';
        document.body.style.position = '';
        document.body.style.top = '';
        document.body.style.left = '';
        document.body.style.right = '';
        document.body.classList.remove('modal-open');
        
        // Restore scroll position
        window.scrollTo(0, scrollY);
    }

    // Close button event
    closeBtn?.addEventListener('click', closeModal);

    // Close on outside click
    modal?.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal();
        }
    });

    // Close on escape key
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && modal.style.display !== 'none') {
            closeModal();
        }
    });

    // Function to open modal with project ID
    window.openProjectModal = function(projectId) {
        // Find project by Name
        const project = window.projectsData?.find(p => p.Name === projectId);
        if (!project) {
            console.error('Project not found:', projectId);
            return;
        }
        const content = `
            <div style="display: flex; justify-content: center; align-items: center; position: absolute; inset: 0; width: 100%; height: 100%; z-index: -1;">
                <img
                    src="${project.Shot?.src || project.Shot}"
                    alt="${project.Name}_BG_Image"
                    style="width: 100%; height: 100%; opacity: 0.5; filter: blur(12px); padding: 1.5rem; object-fit: cover;"
                />
                <div style="background: var(--overlayGradient); width: 100%; height: 100%; position: absolute; inset: 0;"></div>
            </div>

            <div style="display: flex; justify-content: center; align-items: center; flex-direction: column; gap: 1rem; padding: 1rem 0;">
                <img
                    src="${project.Logo?.src || project.Logo}"
                    alt="${project.Name}_Image"
                    width="100"
                    height="100"
                />
                <h1 style="font-family: Ubuntu, sans-serif; font-size: 1.6em; letter-spacing: 0.1em; text-align: center; color: var(--text);">
                    ${project.Name}
                </h1>

                <div style="width: 100%; display: flex; justify-content: center; align-items: center; gap: 1rem;">
                    ${project.Tech?.map(tech => `
                        <img
                            src="${tech.icon?.src || tech.icon}"
                            alt="TechIcon_${tech.title}"
                            width="28"
                            height="28"
                        />
                    `).join('') || ''}
                </div>

                <div style="display: flex; justify-content: center; align-items: center; gap: 1rem; font-size: 1em;">
                    <a
                        href="${project.Source}"
                        target="_blank"
                        rel="author"
                        style="display: flex; justify-content: center; align-items: center; gap: 0.5rem; background: var(--LinkBtnGradient); padding: 0.5rem 1rem; border-radius: 0.25rem; text-decoration: none; color: var(--text);"
                    >
                        <svg
                            stroke="currentColor"
                            fill="currentColor"
                            stroke-width="0"
                            viewBox="0 0 16 16"
                            height="24"
                            width="24"
                            xmlns="http://www.w3.org/2000/svg"
                            style="color: var(--text);"
                        >
                            <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z"></path>
                        </svg>
                        <span>Source Code</span>
                    </a>
                    <a
                        href="${project.Link}"
                        target="_blank"
                        rel="noreferrer"
                        style="display: flex; justify-content: center; align-items: center; gap: 0.5rem; background: var(--LinkBtnGradient); padding: 0.5rem 1rem; border-radius: 0.25rem; text-decoration: none; color: var(--text);"
                    >
                        <svg stroke="currentColor" fill="none" stroke-width="2" viewBox="0 0 24 24" stroke-linecap="round" stroke-linejoin="round" height="24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="m7 7 10 10-5 5V2l5 5Z"/></svg>
                        <span>Live Demo</span>
                    </a>
                </div>
            </div>

            <h2 style="font-family: Ubuntu, sans-serif; font-size: 1.5em; padding-top: 1rem; padding-bottom: 0.75rem; width: 100%; color: var(--text);">
                About the project.
            </h2>
            <div style="display: flex; justify-content: center; align-items: center; flex-direction: column; gap: 1rem; padding: 2.5rem 0;">
                <img
                    src="${project.Mockup?.src || project.Mockup}"
                    alt="${project.Name}_Mockup_Image"
                    width="auto"
                />
                <div style="display: flex; justify-content: center; align-items: center; flex-direction: column; gap: 1rem;">
                    ${project.Demo ? `
                        <div style="display: flex; align-items: center; flex-direction: column; gap: 1rem; width: fit-content; padding: 1rem; background: var(--LinkBtnGradient); border-radius: 0.375rem; margin-top: 1rem;">
                            <h3 style="min-width: max-content; margin: auto; color: var(--text);">Demo Credentials</h3>
                            <div style="display: flex; justify-content: space-evenly; width: 100%; flex-direction: column; gap: 0.5rem; font-size: 0.8em;">
                                <div style="display: flex; gap: 1rem; background: var(--baseLite); padding: 0.5rem; border-radius: 0.375rem;">
                                    <span style="min-width: 5rem; color: var(--text);">Email : </span>
                                    <span style="width: 100%; color: var(--text);">${project.Demo.email}</span>
                                </div>
                                <div style="display: flex; gap: 1rem; background: var(--baseLite); padding: 0.5rem; border-radius: 0.375rem;">
                                    <span style="min-width: 5rem; color: var(--text);">Password : </span>
                                    <span style="width: 100%; color: var(--text);">${project.Demo.password}</span>
                                </div>
                            </div>
                        </div>
                    ` : ''}
                    <p style="width: 100%; text-align: justify; font-size: 1.1em; margin-top: 1rem; padding: 0 1rem; text-indent: 3rem; color: var(--text);">
                        ${project.Desc}
                    </p>
                </div>
            </div>

            ${project.features?.length ? `
                <div style="width: 100%;">
                    <h2 style="font-family: Ubuntu, sans-serif; font-size: 1.4em; text-align: center; padding: 1rem 0; color: hsl(var(--secondary));">Features</h2>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 1.5rem; margin: 0 1rem;">
                        ${project.features.map(feature => `
                            <div style="padding: 1rem; text-align: center; display: flex; flex-direction: column; gap: 0.75rem; border: 1px solid var(--primaryLiteAlt); background: var(--SkillGradientAlt); border-radius: 0.375rem; transition: border-color 0.2s;">
                                <span style="font-family: Ubuntu, sans-serif; font-size: 1.125em; color: var(--text);">${feature.title}</span>
                                <p style="text-align: justify; color: var(--text);">${feature.description}</p>
                            </div>
                        `).join('')}
                    </div>
                </div>
            ` : ''}

            <div style="width: 100%;">
                <h2 style="font-family: Ubuntu, sans-serif; font-size: 1.4em; text-align: center; padding: 1rem 0; color: hsl(var(--secondary));">Tech Stack</h2>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem; padding: 0.5rem; margin-bottom: 2rem;">
                    ${project.Tech?.map(tech => `
                        <div style="display: flex; justify-content: center; align-items: center; flex-direction: column; gap: 1rem; padding: 1rem; border: 1px solid var(--secondaryLiteAlt); background: var(--SkillGradientAlt); border-radius: 0.375rem; transition: border-color 0.2s;">
                            <div style="display: flex; justify-content: center; align-items: center; gap: 1rem;">
                                <img src="${tech.icon?.src || tech.icon}" alt="${tech.title}" width="40" height="40" />
                                <span style="font-size: 1.2em; color: var(--text);">${tech.title}</span>
                            </div>
                            <p style="text-align: center; color: var(--text);">${tech.description}</p>
                        </div>
                    `).join('') || ''}
                </div>
            </div>
        `;

        modalContent.innerHTML = content;
        modal.style.display = 'block';
        
        // Store current scroll position and prevent body scroll
        window.modalScrollY = window.scrollY;
        document.body.style.overflow = 'hidden';
        document.body.style.position = 'fixed';
        document.body.style.top = `-${window.modalScrollY}px`;
        document.body.style.left = '0';
        document.body.style.right = '0';
        document.body.classList.add('modal-open');
        
        // Handle custom scroll behavior
        modalContent.addEventListener('wheel', (e) => {
            modalContent.scrollTop += e.deltaY;
            e.preventDefault();
        });
    };
</script>