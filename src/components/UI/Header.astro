---
import { Download } from "lucide-preact";
import ThemeButton from "./ThemeButton.astro";
---

<header id="header" class="hidden lg:block sticky top-0 z-50 transition-all duration-300 ease-in-out">
    <div
        class="flex justify-between items-center w-full px-6 py-2 bg-headerGradient backdrop-blur-[2px]"
    >
        <a href="#home" class="Fade_Down font-satisfy font-bold text-[2em]">
            <span class="gradientText w-fit">Portfolio.</span>
        </a>

        <nav class="Header_Nav flex gap-6">
            <a class="Fade_Down" href="#about">ABOUT</a>
            <a class="Fade_Down" href="#skills">SKILLS</a>
            <a class="Fade_Down" href="#projects">PROJECTS</a>
            <a class="Fade_Down" href="#contact">CONTACT</a>
        </nav>

        <div class="flex_center gap-4">
            <ThemeButton className="Fade_Down" />

            <a
                class="Fade_Down Header_ActionBtn"
                href="/Kiernan Resume.pdf"
                target="_blank"
            >
                <div class="flex_center gap-2">
                    <p>Resume</p>
                    <Download size={18} />
                </div>
            </a>
        </div>
    </div>
</header>

<script is:inline type="module">
    const headerElement = document.getElementById("header");
    const sectionsList = {
        "#home": document.getElementById("home"),
        "#about": document.getElementById("about"),
        "#skills": document.getElementById("skills"),
        "#projects": document.getElementById("projects"),
        "#contact": document.getElementById("contact"),
    };

    // Set Active class on section scroll
    const handleScroll = () => {
        for (const [linkHref, section] of Object.entries(sectionsList)) {
            if (!section) return;

            const rect = section.getBoundingClientRect();
            const link = document.querySelector(
                `#header a[href="${linkHref}"]`,
            );

            if (
                link &&
                headerElement &&
                rect.top <= headerElement.offsetHeight &&
                rect.bottom >= headerElement.offsetHeight
            ) {
                link?.classList.add("active");
            } else {
                link?.classList.remove("active");
            }
        }
    };

    function throttle(func, limit) {
        let throttling = false;
        return function () {
            if (!throttling) {
                func.apply(this, arguments);
                throttling = true;
                setTimeout(() => {
                    throttling = false;
                }, limit);
            }
        };
    }

    window.addEventListener("scroll", throttle(handleScroll, 100));
    handleScroll(); // Initial call
    
    // Hero section background transition - adjust header opacity
    const heroSection = document.getElementById("Hero");
    const headerDiv = document.querySelector("#header > div");
    
    if (heroSection && headerDiv) {
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.intersectionRatio >= 0.875) {
                    // 7/8 or more of hero is visible - solid background
                    headerDiv.style.backgroundColor = 'var(--base)';
                    headerDiv.style.opacity = '1';
                } else {
                    // Less than 7/8 visible (1/8 has scrolled out) - clear blur effect
                    headerDiv.style.backgroundColor = 'transparent';  
                    headerDiv.style.opacity = '0.9';
                }
            });
        }, {
            threshold: [0.875] // Trigger when 1/8 of hero scrolls out of view
        });
        
        observer.observe(heroSection);
    }
</script>
