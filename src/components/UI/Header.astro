---
import { Download } from "lucide-react";
import ThemeButton from "./ThemeButton.astro";
---

<header id="header" class="hidden lg:block sticky top-0 z-50 transition-all duration-300 ease-in-out">
    <div
        class="flex justify-between items-center w-full px-6 py-2 bg-headerGradient"
        style="backdrop-filter: blur(10px);"
    >
        <button class="Fade_Down font-satisfy font-bold text-[2em] logo-link" onclick="window.scrollTo({top: 0, behavior: 'smooth'})">
            <span class="gradientText w-fit">Portfolio.</span>
        </button>

        <nav class="Header_Nav flex gap-6">
            <button class="Fade_Down nav-link" data-target="about">ABOUT</button>
            <button class="Fade_Down nav-link" data-target="projects">PROJECTS</button>
            <button class="Fade_Down nav-link" data-target="skills">SKILLS</button>
            <button class="Fade_Down nav-link" data-target="contact">CONTACT</button>
        </nav>

        <div class="flex_center gap-4">
            <ThemeButton className="Fade_Down" />

            <a
                class="Fade_Down Header_ActionBtn"
                href="/kiernan-resume-2025-r.pdf"
                target="_blank"
            >
                <div class="flex_center gap-2">
                    <p>Resume</p>
                    <Download size={18} />
                </div>
            </a>
        </div>
    </div>
</header>

<script is:inline type="module">
    const headerElement = document.getElementById("header");
    const sectionsList = {
        "home": document.getElementById("home"),
        "about": document.getElementById("about"),
        "skills": document.getElementById("skills"),
        "projects": document.getElementById("projects"),
        "contact": document.getElementById("contact"),
    };

    // Handle navigation clicks
    document.querySelectorAll('.nav-link').forEach(button => {
        button.addEventListener('click', (e) => {
            e.preventDefault();
            const target = e.target.getAttribute('data-target');
            const section = document.getElementById(target);
            
            if (section) {
                section.scrollIntoView({ 
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    });

    // Set Active class on section scroll
    const handleScroll = () => {
        for (const [sectionId, section] of Object.entries(sectionsList)) {
            if (!section) return;

            const rect = section.getBoundingClientRect();
            const button = document.querySelector(
                `#header button[data-target="${sectionId}"]`,
            );

            if (
                button &&
                headerElement &&
                rect.top <= headerElement.offsetHeight &&
                rect.bottom >= headerElement.offsetHeight
            ) {
                button?.classList.add("active");
            } else {
                button?.classList.remove("active");
            }
        }
    };

    function throttle(func, limit) {
        let throttling = false;
        return function () {
            if (!throttling) {
                func.apply(this, arguments);
                throttling = true;
                setTimeout(() => {
                    throttling = false;
                }, limit);
            }
        };
    }

    window.addEventListener("scroll", throttle(handleScroll, 100));
    handleScroll(); // Initial call
    
    // Hero section background transition - adjust header opacity
    const heroSection = document.getElementById("Hero");
    const headerDiv = document.querySelector("#header > div");
    
    if (heroSection && headerDiv) {
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.intersectionRatio >= 0.875) {
                    // 7/8 or more of hero is visible - solid background
                    headerDiv.style.backgroundColor = 'var(--base)';
                } else {
                    // Less than 7/8 visible (1/8 has scrolled out) - clear blur effect
                    headerDiv.style.backgroundColor = 'transparent';  
                }
            });
        }, {
            threshold: [0.875] // Trigger when 1/8 of hero scrolls out of view
        });
        
        observer.observe(heroSection);
    }
</script>

<style>
    .nav-link {
        background: none;
        border: none;
        cursor: pointer;
        font: inherit;
        color: inherit;
        padding: 0;
    }
    
    .nav-link:hover {
        color: hsl(var(--primary));
    }
    
    .nav-link.active {
        color: hsl(var(--primary));
    }
    
    .header-glassmorphism {
        background: rgba(255, 255, 255, 0.05);
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(4px);
    }
</style>
