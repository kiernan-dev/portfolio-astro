---
import { SectionTitle } from "./UI";
import { ComputersCanvas } from ".";
---

<section id="about" class="w-full bg-background relative">
    <div class="about-container px-6 py-4 pt-14">
        <div class="about-header-wrapper">
            <div class="Fade_Up Title-Tag Title_Line relative flex items-center open primary">
                <span class="text-[1.5em]">{"<"}</span>
                <p class="text-[1.6em]">About Me</p>
                <span class="text-[1.5em]">{">"}</span>
            </div>
        </div>
        
        <div class="about-content-wrapper">
            <div class="desktop-container w-full h-[550px] animated-gradient hidden lg:block">
                <!-- This wrapper is the key to fixing the stacking bug -->
                <div class="canvas-wrapper">
                    <ComputersCanvas client:visible />
                </div>
            </div>

            <div class="about-text-content px-6 py-4">
                <div
                    class="Fade_Up w-full md:w-[80%] lg:w-[80%] flex justify-center items-start flex-col gap-4 py-8 mx-auto"
                >
                    <h2 class="Fade_Up text-[1.5em] font-bold">Hey there! üëãüèª</h2>
                    <p class="Fade_Up text-justify">
                        I'm Kiernan, a <span class="gradientText">Senior Software Engineer</span> with extensive experience in <span class="gradientText">architecting and implementing scalable, high-performance web applications</span>.
                    </p>
                    <p class="Fade_Up text-justify">
                        I specialize in engineering <span class="gradientText">sophisticated and responsive user interfaces</span> utilizing modern frameworks like React and Astro. My focus is on building robust, component-driven architectures and optimizing for performance across a spectrum of projects, from enterprise-level platforms to mission-critical systems.
                    </p>
                    <p class="Fade_Up text-justify">
                        I am eager to collaborate with forward-thinking teams to tackle complex engineering challenges. Let's connect and build something exceptional.
                    </p>
                </div>
            </div>
        </div>
        
        <div class="about-footer-wrapper">
            <div class="Fade_Up Title-Tag Title_Line relative flex items-center close primary">
                <span class="text-[1.5em]">{"</"}</span>
                <p class="text-[1.4em]">About Me</p>
                <span class="text-[1.5em]">{">"}</span>
            </div>
        </div>
    </div>
</section>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const aboutSection = document.getElementById('about');
    const aboutContainer = document.querySelector('.about-container');
    const aboutHeader = document.querySelector('.about-header-wrapper');
    const desktopContainer = document.querySelector('.desktop-container');
    const textContent = document.querySelector('.about-text-content');
    
    if (!aboutSection || !aboutContainer || !aboutHeader || !desktopContainer || !textContent) return;
    
    let isSticky = false;
    const navHeight = 70; // Adjust based on your nav height
    
    const handleScroll = () => {
        const scrollTop = window.scrollY;
        const aboutSectionTop = aboutSection.offsetTop;
        const headerRect = aboutHeader.getBoundingClientRect();
        const textContentRect = textContent.getBoundingClientRect();
        
        // Check if the header has reached the nav position
        const shouldBeSticky = scrollTop >= (aboutSectionTop + headerRect.height - navHeight);
        
        // Check if the text content is touching the header
        const textTouchingHeader = textContentRect.top <= (navHeight + headerRect.height + 50); // 50px buffer
        
        if (shouldBeSticky && !textTouchingHeader && !isSticky) {
            // Activate sticky mode
            aboutContainer.classList.add('about-sticky');
            isSticky = true;
        } else if ((!shouldBeSticky || textTouchingHeader) && isSticky) {
            // Deactivate sticky mode
            aboutContainer.classList.remove('about-sticky');
            isSticky = false;
        }
    };
    
    window.addEventListener('scroll', handleScroll);
    
    // Initial check
    handleScroll();
});
</script>

<style>
    .about-container {
        position: relative;
    }

    .about-header-wrapper {
        position: relative;
        z-index: 10;
    }

    .about-content-wrapper {
        position: relative;
    }

    .desktop-container {
        position: relative;
        z-index: 5;
    }

    .about-text-content {
        position: relative;
        z-index: 15;
        background: hsl(var(--background));
    }

    .about-footer-wrapper {
        position: relative;
        z-index: 10;
    }

    /* Sticky states */
    .about-sticky .about-header-wrapper {
        position: fixed;
        top: 70px; /* Adjust based on your nav height */
        left: 0;
        right: 0;
        background: hsl(var(--background));
        padding: 0 24px;
        z-index: 100;
        transition: all 0.3s ease;
    }

    .about-sticky .desktop-container {
        position: fixed;
        top: 120px; /* Adjust based on header height */
        left: 0;
        right: 0;
        z-index: 50;
        padding: 0 24px;
        transition: all 0.3s ease;
    }

    .about-sticky .about-text-content {
        margin-top: calc(70px + 550px); /* nav height + desktop height */
        position: relative;
        z-index: 200;
    }

    .animated-gradient {
        position: relative;
        overflow: hidden;
    }

    /* This wrapper is the key to fixing the stacking bug */
    .canvas-wrapper {
        position: relative;
        z-index: 1;
        height: 100%;
    }

    /* This makes the Astro component fill the wrapper */
    .canvas-wrapper > * {
        height: 100%;
    }

    .animated-gradient::before,
    .animated-gradient::after {
        content: '';
        position: absolute;
        z-index: 0; /* Explicitly behind the canvas-wrapper */
        top: 50%;
        left: 50%;
        width: 100vh;
        padding-bottom: 100vh;
        border-radius: 50%;
        transform: translate(-50%, -50%);
        background-repeat: no-repeat;
    }

    .animated-gradient::before {
        background-image: radial-gradient(ellipse at center, hsl(var(--primary)) 0%, transparent 40%);
        animation: pulse1 12s ease-in-out infinite;
    }

    .animated-gradient::after {
        background-image: radial-gradient(ellipse at center, hsl(var(--secondary)) 0%, transparent 40%);
        animation: pulse2 12s ease-in-out infinite;
        opacity: 0;
    }

    @keyframes pulse1 {
        0%, 100% {
            opacity: 1;
            transform: translate(-50%, -50%) scale(1);
        }
        50% {
            opacity: 0;
            transform: translate(-50%, -50%) scale(0.95);
        }
    }

    @keyframes pulse2 {
        0%, 100% {
            opacity: 0;
            transform: translate(-50%, -50%) scale(0.95);
        }
        50% {
            opacity: 1;
            transform: translate(-50%, -50%) scale(1);
        }
    }

    /* DEFINITIVE FIX FOR GRADIENT TEXT */
    .gradientText {
        background: var(--gradient);
        background-clip: text;
        -webkit-background-clip: text;
        color: transparent;
        background-size: 200%;
        animation: gradientPan 5s linear infinite;
        will-change: background-position;
    }

    @keyframes gradientPan {
        from {
            background-position: 0% center;
        }
        to {
            background-position: -200% center;
        }
    }
</style>

<style>
    .gradientText {
        color: hsl(var(--primary));
        font-weight: bold;
    }
</style>

