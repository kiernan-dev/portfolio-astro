---
import { ComputersCanvas } from ".";
---

<section id="about" class="w-full bg-background relative">
    <div class="about-container px-6 py-4 pt-14">
        <div class="sticky-elements-wrapper">
            <div class="about-header-wrapper">
                <div class="Fade_Up Title-Tag Title_Line relative flex items-center open primary">
                    <span class="text-[1.5em]">{"<"}</span>
                    <p class="text-[1.6em]">About Me</p>
                    <span class="text-[1.5em]">{">"}</span>
                </div>
            </div>
            
            <div class="desktop-container w-full h-[550px] animated-gradient hidden lg:block">
                <!-- This wrapper is the key to fixing the stacking bug -->
                <div class="canvas-wrapper">
                    <ComputersCanvas client:load />
                </div>
            </div>
        </div>
        
        <div class="about-content-wrapper">

            <div class="about-text-content px-0 py-2 sm:py-4">
                <div
                    class="Fade_Up text-[1em] sm:text-[1.2em] md:text-[1.5em] w-full md:w-[80%] lg:w-[80%] flex justify-center items-start flex-col gap-2 sm:gap-4 py-4 sm:py-8 lg:py-20 px-3 sm:px-4 md:px-6 lg:px-0 mx-auto"
                >
                    <h2 class="Fade_Up text-[1.4em] sm:text-[1.6em] md:text-[2em] font-bold mb-2 sm:mb-0">Hey! üëãüèª</h2>
                    <p class="Fade_Up text-left md:text-justify mb-4">
                        I'm a <span class="gradientText">full-stack developer</span> with 20+ years of design and development experience. My expertise bridges creative design thinking with robust technical implementation, making me equally effective in <span class="gradientText">startup environments</span> and <span class="gradientText">enterprise settings</span>.
                    </p>
                    <p class="Fade_Up text-left md:text-justify">
                        I specialize in graphic design and modern web technologies. Whether it's brand/logo design, refining AI-generated code, or architecting full-stack applications, I deliver high-quality results on time and within scope.
                    </p>
                </div>
            </div>
        </div>
        
        <div class="about-footer-wrapper">
            <div class="Fade_Up Title-Tag Title_Line relative flex items-center close primary">
                <span class="text-[1.5em]">{"</"}</span>
                <p class="text-[1.4em]">About Me</p>
                <span class="text-[1.5em]">{">"}</span>
            </div>
        </div>
    </div>
</section>

<script>
import { gsap } from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';

gsap.registerPlugin(ScrollTrigger);

document.addEventListener('DOMContentLoaded', () => {
    const stickyWrapper = document.querySelector('.sticky-elements-wrapper');
    const textContent = document.querySelector('.about-text-content');
    
    if (!stickyWrapper || !textContent) return;

    let scrollTriggerInstance: any = null;

    const createScrollTrigger = () => {
        // Only create sticky effect on screens 1024px and larger
        if (window.innerWidth >= 1024) {
            scrollTriggerInstance = ScrollTrigger.create({
                trigger: stickyWrapper,
                start: "top 70px", // When wrapper reaches nav height
                end: () => `+=${(textContent as HTMLElement).offsetHeight}`, // End when text content finishes scrolling
                pin: stickyWrapper, // Pin the entire wrapper containing header and desktop
                pinSpacing: false, // Don't add extra space
                invalidateOnRefresh: true, // Recalculate on resize
            });
        }
    };

    const handleResize = () => {
        // Kill existing ScrollTrigger if it exists
        if (scrollTriggerInstance) {
            scrollTriggerInstance.kill();
            scrollTriggerInstance = null;
        }
        
        // Recreate based on current screen size
        createScrollTrigger();
    };

    // Initial creation
    createScrollTrigger();
    
    // Handle window resize
    window.addEventListener('resize', handleResize);
});
</script>

<style>
    .about-container {
        position: relative;
    }

    .sticky-elements-wrapper {
        will-change: transform;
    }

    .about-header-wrapper {
        position: relative;
        z-index: 10;
    }

    .about-content-wrapper {
        position: relative;
    }

    .desktop-container {
        position: relative;
        z-index: 5;
    }

    .about-text-content {
        position: relative;
        margin: 0;
        z-index: 15;
        background: radial-gradient(
            ellipse 90% 90% at center 55%,
            hsla(var(--primary), 0.55) 10%,
            transparent 60%
        );
    }

    .about-footer-wrapper {
        position: relative;
        z-index: 10;
    }

    @media (min-width: 1024px) {
        /* GSAP ScrollTrigger will handle the sticky positioning */
        .about-header-wrapper {
            background: hsl(var(--background));
            z-index: 100;
        }

        .desktop-container {
            z-index: 50;
        }

        .about-text-content {
            position: relative;
            margin: 0 12%;
            z-index: 40;
            background: radial-gradient(
                ellipse 70% 50% at center 55%,
                hsla(var(--primary), 0.55) 10%,
                transparent 60%
            );
        }
    }

    html.light .about-text-content {
        background: radial-gradient(
            ellipse 90% 90% at center 55%,
            rgba(255, 255, 255, 0.75) 10%,
            transparent 60%
        );
    }

    .animated-gradient {
        position: relative;
        overflow: hidden;
    }

    /* This wrapper is the key to fixing the stacking bug */
    .canvas-wrapper {
        position: relative;
        z-index: 1;
        height: 100%;
    }

    /* This makes the Astro component fill the wrapper */
    .canvas-wrapper > * {
        height: 100%;
    }

    .animated-gradient::before,
    .animated-gradient::after {
        content: '';
        position: absolute;
        z-index: 0; /* Explicitly behind the canvas-wrapper */
        top: 50%;
        left: 50%;
        width: 100vh;
        padding-bottom: 100vh;
        border-radius: 50%;
        transform: translate(-50%, -50%);
        background-repeat: no-repeat;
    }

    .animated-gradient::before {
        background-image: radial-gradient(ellipse at center, hsl(var(--primary)) 0%, transparent 40%);
        animation: pulse1 12s ease-in-out infinite;
    }

    .animated-gradient::after {
        background-image: radial-gradient(ellipse at center, hsl(var(--secondary)) 0%, transparent 40%);
        animation: pulse2 12s ease-in-out infinite;
        opacity: 0;
    }

    @keyframes pulse1 {
        0%, 100% {
            opacity: 1;
            transform: translate(-50%, -50%) scale(1);
        }
        50% {
            opacity: 0;
            transform: translate(-50%, -50%) scale(0.95);
        }
    }

    @keyframes pulse2 {
        0%, 100% {
            opacity: 0;
            transform: translate(-50%, -50%) scale(0.95);
        }
        50% {
            opacity: 1;
            transform: translate(-50%, -50%) scale(1);
        }
    }

    /* DEFINITIVE FIX FOR GRADIENT TEXT */
    .gradientText {
        background: var(--gradient);
        background-clip: text;
        -webkit-background-clip: text;
        color: transparent;
        background-size: 200%;
        animation: gradientPan 5s linear infinite;
        will-change: background-position;
    }

    @keyframes gradientPan {
        from {
            background-position: 0% center;
        }
        to {
            background-position: -200% center;
        }
    }
</style>

<style>
    .gradientText {
        color: hsl(var(--primary));
        font-weight: bold;
    }
</style>
